<?php
// Primeira fun√ß√£o (corrigida)
function menos($n1, $n2) {
    $total = $n1 - $n2;
    return $total;
}

// Chamada correta da fun√ß√£o
$resultado = menos(5, 10);
echo "A soma √©: $resultado <br>";

// Segunda fun√ß√£o
function soma($a, $b) {
    return $a + $b;
}

// Chamada correta da segunda fun√ß√£o
$resultado = soma(5, 3);
echo "A soma √©: $resultado <br>";


/*1. Definindo Tipos de Par√¢metros
Desde o PHP 7, voc√™ pode especificar tipos de dados nos par√¢metros, como int, float, string, bool e array.

Exemplo: Fun√ß√£o com Tipagem*/


function teste(int $a, int $b) {
    return $a + $b ;
}

echo teste(5, 10); // Sa√≠da: 15

/*üîπ Para for√ßar um erro em caso de tipo errado, ative declare(strict_types=1); no in√≠cio do script.



2. Definindo Valor Padr√£o para Par√¢metros
Se um par√¢metro n√£o for passado na chamada da fun√ß√£o, ele assume um valor padr√£o.




Exemplo: Par√¢metro Opcional com Valor Padr√£o*/

function saudacao(string $nome = "Visitante") {
    return "Ol√°, $nome! <br>";
}
echo saudacao();        // Sa√≠da: Ol√°, Visitante!
echo saudacao("Josu√©"); // Sa√≠da: Ol√°, Josu√©!

/*üîπ Se nenhum nome for passado, o padr√£o "Visitante" ser√° usado.

3. Definindo Tipo do Valor de Retorno
Podemos tamb√©m definir o tipo de retorno da fun√ß√£o usando : tipo ap√≥s os par√™nteses.



Exemplo: Fun√ß√£o com Tipo de Retorno
<?php*/
function multiplicar(float $x, float $y): float {
    return $x * $y;
}

echo multiplicar(3.5, 2); // Sa√≠da: 7

/*üîπ O : float indica que a fun√ß√£o sempre retornar√° um n√∫mero decimal.
üîπ Se precisar de um retorno inteiro, use : int.



4. Combina√ß√£o de Tipagem + Valor Padr√£o
<?php*/
function dividir(float $a, float $b = 2): float {
    return $a / $b;
}

echo dividir(10);   // Sa√≠da: 5 (pois $b assume o padr√£o 2)
echo dividir(10, 5); // Sa√≠da: 2
echo"<br>";



//passagem de parametro po valor
function calc($n1,$n2,) {
    $total = $n1 + $n2;
    return $total;
}
    $x = 3;
    $y = 2;
    $somi = calc($x, $y);
echo "total: ".$somi;